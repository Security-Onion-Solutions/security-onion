#summary Adding local rules and testing them with scapy
= Introduction =

Adding local rules in Security Onion is a rather straightforward process.  However, generating custom traffic to test the alert can sometimes be a challenge.  Here, we will show you how to add the local rule and then use the python library scapy to trigger the alert.

= Steps =

  # Open the /etc/nsm/rules/local.rules file.
     You can gain access to the local.rules file in two ways.  
       # Applications -> IDS Rules -> Add Local Rules
       # sudo vi /etc/nsm/rules/local.rules
  # Let's add a simple rule that will alert on the detection of a string in a tcp session. Each alert is a single line. 
     {{{
alert tcp any any -> $HOME_NET 7789 (msg: "Vote for Security Onion Toolsmith Tool of 2011!"; 
reference: url,http://holisticinfosec.blogspot.com/2011/12/choose-2011-toolsmith-tool-of-year.html; 
content: "toolsmith"; flow:to_server; nocase; sid:9000547; rev:1)     
}}}
  # Restart snort.
     There are two ways to restart snort.  
     The first method of restarting snort, restarts only the snort processes.  Restarting snort in this way means that the sid-msg.map file that maps signature IDs to their corresponding messages (in this case: 9000547 -> "Vote for Security Onion Toolsmith Tool of 2011!") will not be generated until the nightly pulledpork_update.sh cronjob.
     {{{
sudo nsm_sensor_ps-restart --only-snort     
     }}}
     The second method of restarting snort involves directly calling the pulledpork_update.sh script which will update to the most recent set of signatures, regenerate the sid-msg.map file, and restart the snort process.
     {{{
sudo /usr/local/bin/pulledpork_update.sh
     }}}
     If you built the rule correctly, then snort should be back up and running. 
  # Generate some traffic to trigger the alert.
     To generate traffic we are going to use the python library scapy to craft packets with specific information to ensure we trigger the alert with the information we want.
     {{{
sudo scapy
     }}}
  # Enter the following sample in a line at a time.  Any line beginning with "#" can be ignored as it is a comment.
     {{{
# Craft the layer 2 information.
# The ip addresses can be random, but I would suggest sticking to RFC1918
ip = IP()
ip.dst = "192.168.200.4"
ip.src = "192.168.100.3"

# Craft the layer 3 information.
# Since we specified port 7789 in our snort rule, 
tcp = TCP()
tcp.dport = 7789
tcp.sport = 1234

# Set the playload
payload = "Toolsmith"

# Use the / operator to compose our packet and transfer it with the send() method.
send(ip/tcp/payload)
     }}}
  # Check sguil for the corresponding alert
     <a href="http://security-onion.googlecode.com/svn/wiki/images/local-rules/sguil-window_verify-alert.png">
        <img src="http://security-onion.googlecode.com/svn/wiki/images/local-rules/thumbs/thumb_sguil-window_verify-alert.png"></img>
     </a>

     You can see that we have an alert with the IP addresses we specified and the TCP ports we specified.
     If you right click on the *Alert ID* column you can select "Transcript" and verify the payload we sent.
     <a href="http://security-onion.googlecode.com/svn/wiki/images/local-rules/sguil-transcript_check-payload.png">
        <img src="http://security-onion.googlecode.com/svn/wiki/images/local-rules/thumbs/thumb_sguil-transcript_check-payload.png"></img>
     </a>

  * You can learn more about snort and writing snort signatures from the [http://manual.snort.com/node26.html Snort Manual]
  * You can learn more about scapy at [http://www.secdev.org/projects/scapy secdev.org] and [http://itgeekchronicles.co.uk/2012/05/31/scapy-guide-the-release/ itgeekchronicles.co.uk].

  